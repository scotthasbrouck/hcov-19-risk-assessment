{"version":3,"sources":["cov_icon.webp","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","paddingTop","appBarSpacer","mixins","toolbar","content","flexGrow","height","marginTOp","overflow","container","spacing","paddingBottom","addCommasLabel","x","toString","replace","iOSBoxShadow","IOSSlider","withStyles","color","padding","width","thumb","backgroundColor","boxShadow","marginTop","marginLeft","active","valueLabel","left","top","background","track","rail","opacity","mark","markActive","Slider","App","props","state","infected","population","group","growthRate","classes","this","Box","className","AppBar","Toolbar","IconButton","edge","menuButton","aria-label","src","logo","alt","Typography","variant","title","style","wwidth","Container","maxWidth","Grid","item","xs","gutterBottom","value","onChange","e","v","setState","valueLabelDisplay","step","marks","min","max","valueLabelFormat","TableContainer","component","Paper","Table","table","TableHead","TableRow","TableCell","TableBody","numberOfRows","intialInfected","values","lastInfected","i","Math","ceil","infectOvPopulation","Decimal","dividedBy","exponent","minus","toPower","exposurePercent","mul","push","lessThan","toFixed","rows","map","row","key","day","align","exposureRisk","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,uC,2XCgCrCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,WAAY,SAEdC,aAAcH,EAAMI,OAAOC,QAC3BC,QAAS,CACPC,SAAU,EACVC,OAAQ,QACRC,UAAW,QACXC,SAAU,QAEZC,UAAW,CACTT,WAAYF,EAAMY,QAAQ,IAC1BC,cAAeb,EAAMY,QAAQ,QAI7BE,EAAiB,SAASC,GAC5B,OAAOA,EAAEC,WAAWC,QAAQ,wBAAyB,MA6BjDC,EACJ,kFAEIC,EAAYC,YAAW,CAC3BnB,KAAM,CACJoB,MAAO,UACPb,OAAQ,EACRc,QAAS,YACTC,MAAO,OAETC,MAAO,CACLhB,OAAQ,GACRe,MAAO,GACPE,gBAAiB,OACjBC,UAAWR,EACXS,WAAY,GACZC,WAAY,EACZ,2BAA4B,CAC1BF,UAAW,iFAEX,uBAAwB,CACtBA,UAAWR,KAIjBW,OAAQ,GACRC,WAAY,CACVC,KAAM,oBACNC,KAAM,GACN,MAAO,CACLC,WAAY,cACZZ,MAAO,SAGXa,MAAO,CACL1B,OAAQ,GAEV2B,KAAM,CACJ3B,OAAQ,EACR4B,QAAS,GACTX,gBAAiB,WAEnBY,KAAM,CACJZ,gBAAiB,UACjBjB,OAAQ,EACRe,MAAO,EACPI,WAAY,GAEdW,WAAY,CACVF,QAAS,EACTX,gBAAiB,iBA/CHL,CAiDfmB,KAGGC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,SAAU,IACVC,WAAY,IACZC,MAAO,GACPC,WAAY,MANG,E,sEAUT,IAAD,OACDC,EAAYC,KAAKP,MAAjBM,QAEN,OACE,kBAACE,EAAA,EAAD,CAAKC,UAAU,OACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQJ,UAAWH,EAAQQ,WAAYlC,MAAM,UAAUmC,aAAW,QACjF,yBAAKC,IAAKC,IAAMC,IAAI,OAAOpC,MAAM,OAAOf,OAAO,UAEnD,kBAACoD,EAAA,EAAD,CAAYC,QAAQ,KAAKX,UAAWH,EAAQe,OAA5C,uCAMF,0BAAMZ,UAAWH,EAAQzC,SACvB,yBAAKyD,MAAO,CAAEvD,OAAQ,QAASwD,OAAQ,UACvC,yBAAKd,UAAWH,EAAQ5C,eACxB,kBAAC8D,EAAA,EAAD,CAAWC,SAAS,KAAKhB,UAAWH,EAAQpC,WAC5C,kBAACwD,EAAA,EAAD,CAAMxD,WAAS,EAACC,QAAS,GACvB,kBAACuD,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACb,oNAEE,6BACA,6BAHF,0BAIE,6BACA,6BALF,6HAME,6BACA,6BAPF,sGAQE,6BACA,6BATF,qEAUE,6BACA,6BAXF,uNAYE,6BACA,8BAGF,kBAACT,EAAA,EAAD,CAAYU,cAAY,GAAxB,2BAGA,kBAACnD,EAAD,CACEoD,MAAOvB,KAAKN,MAAMG,MAClB2B,SAAU,SAACC,EAAGC,GAAQ,EAAKC,SAAS,CAAE9B,MAAO6B,KAC7CE,kBAAkB,eAClBC,KAAM,EACNC,OAAO,EACPC,IAAK,EACLC,IAAK,MAEP,kBAACpB,EAAA,EAAD,CAAYU,cAAY,GAAxB,2BAGA,kBAACnD,EAAD,CACEoD,MAAOvB,KAAKN,MAAME,WAClB4B,SAAU,SAACC,EAAGC,GAAQ,EAAKC,SAAS,CAAE/B,WAAY8B,KAClDE,kBAAkB,eAClBK,iBAAkBnE,EAClB+D,KAAM,IACNC,OAAO,EACPC,IAAK,IACLC,IAAK,MAEP,kBAACpB,EAAA,EAAD,CAAYU,cAAY,GAAxB,gCAGA,kBAACnD,EAAD,CACEoD,MAAOvB,KAAKN,MAAMC,SAClB6B,SAAU,SAACC,EAAGC,GAAQ,EAAKC,SAAS,CAAEhC,SAAU+B,KAChDE,kBAAkB,eAClBK,iBAAkBnE,EAClB+D,KAAM,GACNC,OAAO,EACPC,IAAK,GACLC,IAAK,OAGT,kBAACb,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACb,kBAACa,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CAAOnC,UAAWH,EAAQuC,MAAO9B,aAAW,gBAC1C,kBAAC+B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,wBACA,kBAACA,EAAA,EAAD,iDACA,kBAACA,EAAA,EAAD,uCAGJ,kBAACC,EAAA,EAAD,KAnLL,SAASC,EAClBC,EACA9C,EACAF,EACAC,GAGA,IAFA,IAAIgD,EAAS,GACTC,EAAeF,EACXG,EAAI,EAAGA,EAAIJ,EAAcI,IAAK,CACpC,IAAIpD,EAAiB,IAANoD,EAAUH,EAAiBI,KAAKC,KAAKH,EAAehD,GACnEgD,EAAenD,EACf,IAAIuD,EAAqBC,IAAQxD,GAAUyD,UAAUxD,GAEjDyD,EADUF,IAAQ,GAAcG,MAAMJ,GACnBK,QAAQ1D,GAG3B2D,EAFeL,IAAQ,GAAcG,MAAMD,GAEZI,IAAI,KAEvCZ,EAAOa,KAAK,CACV,IAAa,IAANX,EAAU,QAAUA,EAC3B,SAAYjF,EAAe6B,GAC3B,aAAgB6D,EAAgBG,SAAS,MAAQhE,EAAWC,EAAa4D,EAAgBI,QAAQ,GAAG5F,WAAa,IAAM,SAG3H,OAAO6E,EA6JQgB,CAAK,GAAI7D,KAAKN,MAAMC,SAAUK,KAAKN,MAAMI,WAAYE,KAAKN,MAAME,WAAYI,KAAKN,MAAMG,OAAOiE,KAAI,SAAAC,GAAG,OACpG,kBAACvB,EAAA,EAAD,CAAUwB,IAAKD,EAAIE,KACjB,kBAACxB,EAAA,EAAD,CAAWyB,MAAM,QAAQH,EAAIE,KAC7B,kBAACxB,EAAA,EAAD,CAAWyB,MAAM,QAAQH,EAAIpE,UAC7B,kBAAC8C,EAAA,EAAD,CAAWyB,MAAM,QAAQH,EAAII,wBASxC,kBAAClD,EAAA,EAAD,CAAWC,SAAS,KAAKhB,UAAWH,EAAQpC,WAA5C,mE,GAhHSyG,IAAMC,WAiITjG,cAAWtB,EAAXsB,CAAsBoB,GC3PjB8E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d19992c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cov_icon.6d3140ad.webp\";","import React from 'react';\nimport logo from './cov_icon.webp';\nimport './App.css';\n\n// Styleeeessss\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\n\n// Maths\nimport Decimal from 'decimal.js';\n\n// React comps\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\n\n// Inputs\nimport Slider from '@material-ui/core/Slider';\n\n// Table\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    paddingTop: '100px'\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    marginTOp: '100px',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(12),\n    paddingBottom: theme.spacing(4),\n  }\n}));\n\nvar addCommasLabel = function(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\nvar rows = function(numberOfRows,\n  intialInfected,\n  growthRate,\n  population,\n  group) {\n  var values = [];\n  var lastInfected = intialInfected;\n  for(var i = 0; i < numberOfRows; i++) {\n    var infected = i === 0 ? intialInfected : Math.ceil(lastInfected * growthRate);\n    lastInfected = infected;\n    var infectOvPopulation = Decimal(infected).dividedBy(population);\n    var logBase = Decimal(1.0000000000).minus(infectOvPopulation);\n    var exponent = logBase.toPower(group);\n    var exposureRisk = Decimal(1.0000000000).minus(exponent);\n\n    var exposurePercent = exposureRisk.mul(100);\n\n    values.push({\n      'day': i === 0 ? 'Today' : i,\n      'infected': addCommasLabel(infected),\n      'exposureRisk': exposurePercent.lessThan(100) && infected < population ? exposurePercent.toFixed(2).toString() + '%' : '100%'\n    });\n  }\n  return values;\n};\n\nconst iOSBoxShadow =\n  '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.13),0 0 0 1px rgba(0,0,0,0.02)';\n\nconst IOSSlider = withStyles({\n  root: {\n    color: '#3880ff',\n    height: 2,\n    padding: '35px 30px',\n    width: '75%'\n  },\n  thumb: {\n    height: 28,\n    width: 28,\n    backgroundColor: '#fff',\n    boxShadow: iOSBoxShadow,\n    marginTop: -14,\n    marginLeft: 0,\n    '&:focus,&:hover,&$active': {\n      boxShadow: '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.3),0 0 0 1px rgba(0,0,0,0.02)',\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        boxShadow: iOSBoxShadow,\n      },\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 11px)',\n    top: -22,\n    '& *': {\n      background: 'transparent',\n      color: '#000',\n    },\n  },\n  track: {\n    height: 2,\n  },\n  rail: {\n    height: 2,\n    opacity: 0.5,\n    backgroundColor: '#bfbfbf',\n  },\n  mark: {\n    backgroundColor: '#bfbfbf',\n    height: 8,\n    width: 1,\n    marginTop: -3,\n  },\n  markActive: {\n    opacity: 1,\n    backgroundColor: 'currentColor',\n  },\n})(Slider);\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      infected: 1000,\n      population: 1000000,\n      group: 20,\n      growthRate: 1.31\n    };\n  }\n\n  render() {\n  const { classes } = this.props;\n\n    return (\n      <Box className=\"App\">\n      <AppBar>\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <img src={logo} alt=\"Logo\" width=\"40px\" height=\"40px\" />\n          </IconButton>\n        <Typography variant=\"h6\" className={classes.title}>\n           HCoV-19 Risk Assesment Calculator\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <main className={classes.content}>\n        <div style={{ height: '150px', wwidth: '100%'}} />\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n        <Grid container spacing={4}>\n          <Grid item xs={6}>\n            <div>\n              This is an easy to use logistic growth calculator that you can use to help make risk assesment decisions of whether or not to attend an event in public during the HCoV-19 Pandemic.\n              <br />\n              <br />To use, enter 3 values:\n              <br />\n              <br />1. The size of the group gathering (for example, if going to a store, how many people will walk through that store today?)\n              <br />\n              <br />2. The population of your city or community. For example San Francisco Bay Area: roughly 6,000,000.\n              <br />\n              <br />3. The number of confirmed infected individuals in your community.\n              <br />\n              <br />The final table of results will show you how many expected infected indiviuals there will be in your community in a given number of days, and what your risk of exposure will be by attending the event you entered.\n              <br />\n              <br />\n            </div>\n\n            <Typography gutterBottom>\n              Size of Group Gathering\n            </Typography>\n            <IOSSlider\n              value={this.state.group}\n              onChange={(e, v) => { this.setState({ group: v }); }}\n              valueLabelDisplay=\"gutterBottom\"\n              step={1}\n              marks={false}\n              min={2}\n              max={1000}            \n            />\n            <Typography gutterBottom>\n              Population of Community\n            </Typography>\n            <IOSSlider\n              value={this.state.population}\n              onChange={(e, v) => { this.setState({ population: v }); }}\n              valueLabelDisplay=\"gutterBottom\"\n              valueLabelFormat={addCommasLabel}\n              step={1000}\n              marks={false}\n              min={1000}\n              max={10000000}            \n            />\n            <Typography gutterBottom>\n              Number of Confirmed Infected\n            </Typography>\n            <IOSSlider\n              value={this.state.infected}\n              onChange={(e, v) => { this.setState({ infected: v }); }}\n              valueLabelDisplay=\"gutterBottom\"\n              valueLabelFormat={addCommasLabel}\n              step={10}\n              marks={false}\n              min={10}\n              max={100000}            \n            />\n          </Grid>\n          <Grid item xs={6}>\n            <TableContainer component={Paper}>\n              <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>From Now (Days)</TableCell>\n                    <TableCell>Total Infected in Community (Projection)</TableCell>\n                    <TableCell>Exposure Risk of Group Event</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                {rows(11, this.state.infected, this.state.growthRate, this.state.population, this.state.group).map(row => (\n                  <TableRow key={row.day}>\n                    <TableCell align=\"left\">{row.day}</TableCell>\n                    <TableCell align=\"left\">{row.infected}</TableCell>\n                    <TableCell align=\"left\">{row.exposureRisk}</TableCell>\n                  </TableRow>\n                ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n        </Grid>\n         </Container>\n         <Container maxWidth=\"lg\" className={classes.container}>\n         Copyright (C) Scott Hasbrouck, 2020. All Rights Reserved.\n         </Container>\n      </main>\n\n\n\n      </Box>\n    );\n  }\n}\n\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(useStyles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}